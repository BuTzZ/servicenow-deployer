<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_deployer.GetRepoDependencyTree</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns the dependency tree based on the given repository url and the desired version.</description>
        <name>GetRepoDependencyTree</name>
        <script><![CDATA[function GetRepoDependencyTree(strRepoUrl,strVersions,aCurrentPath,sourcecontrol)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var ArrayValueExists = x_snc_devtools.ArrayValueExists;
	var GetCleanAppName = x_snc_devtools.GetCleanAppName;
	var GetValue = x_snc_devtools.GetValue;
	var Clone = x_snc_devtools.Clone;
	var SetValue = x_snc_devtools.SetValue;
	var IsVersionCompatible = x_snc_devtools.IsVersionCompatible;
	var IsValidUrl = x_snc_devtools.IsValidUrl;
	var GetVersionFromString = x_snc_devtools.GetVersionFromString;
	var IsValidVersion = x_snc_devtools.IsValidVersion;
	
	strRepoUrl = GetStringValue(strRepoUrl);
	strVersion = GetStringValue(strVersion);
	
	function GetDependencyStatusSummary(aStatusValues)
	{
		aStatusValues = GetArrayValue(aStatusValues);
		var strStatusSummary = 'ok';
		if (ArrayValueExists(aStatusValues,'incompatible_version'))
		{
			strStatusSummary = 'incompatible_version';
		}
		if (ArrayValueExists(aStatusValues,'missing'))
		{
			strStatusSummary = 'missing';
		}
		if (ArrayValueExists(aStatusValues,'circular'))
		{
			strStatusSummary = 'circular';
		}		
		return strStatusSummary;
	}
	
	var aVersions = GetArrayValue(strVersions);
	
	if (sourcecontrol == null)
	{
		sourcecontrol = new SourceControlAPI();	
	}
	
	var aBranches = sourcecontrol.GetBranchesFromRepo(strRepoUrl);
		
	Debug(aBranches);
	
	if (aBranches == false)
	{
		return false;
	}
	
	function GetPackageRecordFromRepoByVersions(strRepoUrl,aVersions)
	{
		var aBranches = sourcecontrol.GetBranchesFromRepo(strRepoUrl);
		//Debug(strRepoUrl);
		
		var aDeployableBranches = [];
		for (var nBranch = 0; nBranch < aBranches.length; nBranch++)
		{
			var strCurrentBranch = aBranches[nBranch];
			if (IsBranchDeployable(strCurrentBranch) == true)
			{
				if (strCurrentBranch == 'master')
				{
					aDeployableBranches.push(strCurrentBranch);
				}
				else
				{
					var strVersionFromBranch = GetVersionFromString(strCurrentBranch);
					if (IsValidVersion(strVersionFromBranch) == true)
					{
						for (var nVersion = 0; nVersion < aVersions.length; nVersion++)
						{
							var strVersion = aVersions[nVersion];
							if (IsVersionCompatible(strVersionFromBranch,strVersion))
							{
								aDeployableBranches.push(strCurrentBranch);
							}
						}		
					}
				}
			}
		}
		
		Debug(aDeployableBranches);
	
		for (var nBranch = 0; nBranch < aDeployableBranches.length; nBranch++)
		{
			var strCurrentBranch = aDeployableBranches[nBranch];

			var packagerecord = sourcecontrol.GetPackageRecordFromRepo(strRepoUrl,strCurrentBranch);
			Debug(packagerecord);
			var strVersionInBranch = GetStringValue(packagerecord.version);
			
			if (   strCurrentBranch == 'master'
				|| GetVersionFromString(strCurrentBranch) == strVersionInBranch)
			{
				for (var nVersion = 0; nVersion < aVersions.length; nVersion++)
				{
					var strVersion = aVersions[nVersion];
					if (IsVersionCompatible(strVersionInBranch,strVersion))
					{
						packagerecord = SetValue(strCurrentBranch,packagerecord,'branch');
						return packagerecord;
					}
				}		
			}

		}
		return false;
	}
	

	var result = GetPackageRecordFromRepoByVersions(strRepoUrl,aVersions);
	if (result == false)
	{
		return false;
	}
	
	var strBranch = result.branch;
	
	aCurrentPath = GetArrayValue(aCurrentPath);
	if (aCurrentPath.length == 0)
	{
		aCurrentPath.push(GetValue(result,'sys_id'));
	}
	
	//Debug(result);

	result['name'] = GetCleanAppName(result['name']);
	result['dependency_status_summary'] = 'ok';
	
	var aDependencies = [];
	
	var strVersion = strVersions;
	
	var aDependencyRecords = sourcecontrol.GetDependencyRecordsFromRepo(strRepoUrl,strBranch);
	
	for (var nDependency = 0; nDependency < aDependencyRecords.length; nDependency++)
	{
		var dependency = {};
		var dependencyRecord = aDependencyRecords[nDependency];
		var strCompatibleVersions = GetStringValue(GetValue(dependencyRecord,'versions'));
		var strRepoUrl = GetStringValue(GetValue(dependencyRecord,'repo_url'));
		
		if (ArrayValueExists(aCurrentPath,GetStringValue(GetValue(dependencyRecord,'dependency'))) == true)
		{
			dependency['name'] = dependencyRecord.name;
			dependency['sys_id'] = dependencyRecord.dependency;
			dependency['dependency_status'] = 'circular';
		}
		else
		{
			var aNewCurrentPath = Clone(aCurrentPath);
			aNewCurrentPath.push(GetStringValue(dependencyRecord.dependency));

			if (strRepoUrl == '')
			{
				dependency = {
					sys_id: GetStringValue(dependencyRecord.dependency),
					name: GetStringValue(dependencyRecord.name),
					repo_url: '',
					dependency_status: 'missing_repo_url'
					};	
			}
			else if (IsValidUrl(strRepoUrl) == false)
			{
				dependency = {
					sys_id: GetStringValue(dependencyRecord.dependency),
					name: GetStringValue(dependencyRecord.name),
					repo_url: GetStringValue(dependencyRecord.repo_url),
					dependency_status: 'invalid_repo_url'
					};
			}
			else
			{
				
				dependency = GetRepoDependencyTree(strRepoUrl,dependencyRecord['versions'],aNewCurrentPath,sourcecontrol);
				dependency['repo_url'] = strRepoUrl;
				if (dependency == false)
				{
					dependency = {
						sys_id: GetStringValue(dependencyRecord.dependency),
						name: GetStringValue(dependencyRecord.name),
						repo_url: GetStringValue(dependencyRecord.repo_url),
						dependency_status: 'missing'
						};
				}
				else
				{
					var strDependencyVersion = GetValue(dependency,'version');
					var aCompatibleVersions = GetArrayValue(strCompatibleVersions);
					var bCompatibleVersion = false;
					for (var nVersion = 0; nVersion < aCompatibleVersions.length; nVersion++)
					{
						var strRequiredVersion = aCompatibleVersions[nVersion];
						if (IsVersionCompatible(strDependencyVersion,strRequiredVersion) == true)
						{
							bCompatibleVersion = true;
						}
					}
					if (bCompatibleVersion == true)
					{
						dependency['dependency_status'] = 'ok';
					}
					else
					{
						dependency['dependency_status'] = 'incompatible_version';
					}

				}
			}
		}
		dependency['compatible_versions'] = strCompatibleVersions;
		
		result['dependency_status_summary'] = GetDependencyStatusSummary(
			[result['dependency_status_summary'],
			dependency['dependency_status'],
			dependency['dependency_status_summary']]);
		
		aDependencies.push(dependency);
	}
	
	SetValue(aDependencies,result,'_dependencies');
	
	var strPackageRepoUrl = GetStringValue(GetValue(result,'x_snc_devtools_repo_url'));
	if (strPackageRepoUrl == '')
	{
		SetValue(strRepoUrl,result,'x_snc_devtools_repo_url');
	}

	//Debug('SourceControlAPI::GetRequestCount(): '+sourcecontrol.GetRequestCount());
	
	return result;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-12 15:38:30</sys_created_on>
        <sys_id>449f875b974ae910a6a07767f053af60</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>GetRepoDependencyTree</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_449f875b974ae910a6a07767f053af60</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-30 06:19:54</sys_updated_on>
    </sys_script_include>
</record_update>
