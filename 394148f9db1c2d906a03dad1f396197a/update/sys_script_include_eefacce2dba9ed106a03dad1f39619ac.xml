<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_deployer.SourceControlAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The class acts as an interface to source control repositories in GitHub or GitLab.</description>
        <name>SourceControlAPI</name>
        <script><![CDATA[var SourceControlAPI = Class.create();
SourceControlAPI.prototype = {
	
    initialize: function()
	{
		this.m_nRequestCount = 0;
		this.m_cache = new x_snc_devtools.TransactionCacheAPI('SOURCE_CONTROL_API');
    },
	
	GetRequestCount: function()
	{
		return this.m_nRequestCount;
	},
	
	Error: function(strMessage)
	{
		Log('SourceControlAPI: ERROR: '+strMessage);
	},
	
	ParseRepoUrl: function(strRepoUrl)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var StringReplace = x_snc_devtools.StringReplace;
		var StringFind = x_snc_devtools.StringFind;
		
		var strRepoType = GetRepositoryType(strRepoUrl);
		switch (strRepoType)
		{
			case 'github':

				strRepoUrl = StringReplace(strRepoUrl,'https://github.com/','');
				strRepoUrl = StringReplace(strRepoUrl,'.git','');
				
				var aComponents = strRepoUrl.split('/');
				if (aComponents.length < 2)
				{
					return false;
				}
				var result = {};
				result['repo'] = aComponents[aComponents.length-1];
				result['owner'] = aComponents[aComponents.length-2];
				return result;
				break;
				
			case 'gitlab':
				
				var strProject = StringReplace(strRepoUrl,'https://','');
				strProject = StringReplace(strProject,'.git','');
				var nFirstSlash = StringFind(strProject,'/');
				strProject = strProject.substring(nFirstSlash+1);
				var result = {};
				if (strProject == 'sm.now/platform')
				{
					strProject = '177693';
				}
				if (strProject == 'sm.now/devtools')
				{
					strProject = '173267';
				}				
				result['project'] = strProject;
				
				function GetRepositoryApi(strRepoUrl)
				{
					var grRepoCredentials = new GlideRecord('x_snc_deployer_repository_credentials');
					grRepoCredentials.orderByDesc('url');
					grRepoCredentials.addActiveQuery();
					grRepoCredentials.query();
					while (grRepoCredentials.next())
					{
						if (strRepoUrl.indexOf(grRepoCredentials.url) == 0)
						{
							return GetStringValue(grRepoCredentials.api_url);
						}
					}
					return false;
				}
				
				result['api_url'] = GetRepositoryApi(strRepoUrl);
				return result;			
				
			default:
				return false;
		}	
		
	},
	
	GetBranchesFromRepo: function(strRepoUrl)
	{
		//Debug('GetBranchesFromRepo: '+strRepoUrl);
		var GetValue = x_snc_devtools.GetValue;
		
		var aBranches = this.m_cache.GetItem('GetBranchesFromRepo'+strRepoUrl);
		if (aBranches != null)
		{
			return aBranches;
		}
		
		var strRepoType = GetRepositoryType(strRepoUrl);
		
		//Debug('GetRepositoryType: '+strRepoType);
		if (strRepoType == false)
		{
			return false;
		}
		
		var grCredential = GetCredentialForRepository(strRepoUrl);
		//Debug('GetCredentialForRepository');
		//Debug(grCredential);
		if (grCredential == false)
		{
			return false;
		}		
		
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				github.SetCredential(grCredential.sys_id);

				var aBranches = github.GetBranchesFromRepo(strOwner,strRepo);
				
				var aResult = [];
				
				for (var nBranch = 0; nBranch < aBranches.length; nBranch++)
				{
					aResult.push(GetValue(aBranches,nBranch,'name'));
				}
				
				this.m_nRequestCount += github.GetRequestCount();
				
				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,aResult);
				return aResult;
				
			case 'gitlab':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grCredential.sys_id);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var aBranches = gitlab.GetBranchesFromRepo(strProject);
				
				var aResult = [];
				
				for (var nBranch = 0; nBranch < aBranches.length; nBranch++)
				{
					aResult.push(GetValue(aBranches,nBranch,'name'));
				}
				
				this.m_nRequestCount += gitlab.GetRequestCount();

				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,aResult);
				return aResult;				
				
			default:
				this.m_cache.SetItem('GetBranchesFromRepo'+strRepoUrl,false);
				return false;
		}
				
		
	},
	
	GetFilesFromRepo: function(strRepoUrl,strBranch,strPath)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var GetValue = x_snc_devtools.GetValue;

		strPath = GetStringValue(strPath);
		if (strPath == '')
		{
			strPath = '/';
		}	
		
		var aFiles = this.m_cache.GetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath);
		if (aFiles != null)
		{
			//Debug('GetFilesFromRepo: Cache Hit!');
			return aFiles;
		}
				
		var strRepoType = GetRepositoryType(strRepoUrl);
		if (strRepoType == false)
		{
			return false;
		}
		
		var grCredential = GetCredentialForRepository(strRepoUrl);
		if (grCredential == false)
		{
			return false;
		}
			
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				github.SetCredential(grCredential.sys_id);

				var aFiles = github.GetFilesFromBranch(strOwner,strRepo,strBranch,strPath);
				
				var aResult = [];
				
				for (var nFile = 0; nFile < aFiles.length; nFile++)
				{
					var strType = GetValue(aFiles,nFile,'type');
					if (strType == 'file')
					{
						var strFilePath = GetValue(aFiles,nFile,'path');
						aResult.push(strFilePath);
					}
				}
				
				this.m_nRequestCount += github.GetRequestCount();
				
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,aResult);
				return aResult;
				
			case 'gitlab':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grCredential.sys_id);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var aFiles = gitlab.GetFilesFromBranch(strProject,strBranch,'');
				
				var aResult = [];
				
				for (var nFile = 0; nFile < aFiles.length; nFile++)
				{
					var strType = GetValue(aFiles,nFile,'type');
					if (strType == 'blob')
					{
						var strFilePath = GetValue(aFiles,nFile,'path');
						aResult.push(strFilePath);
					}
				}
				
				this.m_nRequestCount += gitlab.GetRequestCount();
				
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,aResult);
				return aResult;	
				
			default:
				this.m_cache.SetItem('GetFilesFromRepo'+strRepoUrl+strBranch+strPath,false);
				return false;
		}
		
	},
	
	GetFileContent: function(strRepoUrl,strBranch,strPath)
	{
		var GetValue = x_snc_devtools.GetValue;

		var strContent = this.m_cache.GetItem('GetFileContent'+strRepoUrl+strBranch+strPath);
		if (strContent != null)
		{
			return strContent;
		}			
		
		var strRepoType = GetRepositoryType(strRepoUrl);
		if (strRepoType == false)
		{
			return false;
		}
		
		var grCredential = GetCredentialForRepository(strRepoUrl);
		if (grCredential == false)
		{
			return false;
		}
			
		switch (strRepoType)
		{
			case 'github':
				
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strOwner = GetValue(parsed,'owner');
				var strRepo = GetValue(parsed,'repo');
				
				var github = new x_snc_devtools.GitHubAPI();
				github.SetCredential(grCredential.sys_id);

				var file = github.GetFile(strOwner,strRepo,strBranch,strPath);
				if (file == false)
				{
					return false;
				}
				
				this.m_nRequestCount += github.GetRequestCount();
				
				var strContent = GetValue(file,'content');
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,strContent);
				return strContent;
				
			case 'gitlab':
				var parsed = this.ParseRepoUrl(strRepoUrl);
				if (parsed == false)
				{
					return false;
				}
				
				var strProject = GetValue(parsed,'project');
				
				var gitlab = new x_snc_devtools.GitLabAPI();
				gitlab.SetCredential(grCredential.sys_id);
				gitlab.SetApiUrl(GetValue(parsed,'api_url'));

				var file = gitlab.GetFile(strProject,strBranch,strPath);
				if (file == false)
				{
					return false;
				}
				
				this.m_nRequestCount += gitlab.GetRequestCount();
				
				var strContent = GetValue(file,'content');
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,strContent);
				return strContent;			
				
			default:
				this.m_cache.SetItem('GetFileContent'+strRepoUrl+strBranch+strPath,false);
				return false;
		}
		
	},	
	
	GetPackageRecordFromRepo: function(strRepoUrl,strBranch)
	{
		var Base64Decode = x_snc_devtools.Base64Decode;
		var ParseXml = x_snc_devtools.ParseXml;
		var GetValue = x_snc_devtools.GetValue;
		var IsObject = x_snc_devtools.IsObject;

		//var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch,'**/sys_app_');
		var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch);
		if (aFiles == false)
		{
			return false;
		}
		
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var strPath = aFiles[nFile];
			
			if (   strPath.indexOf('update/') == -1
				&& strPath.indexOf('author_elective_update/') == -1
				&& strPath.indexOf('sys_app_') != -1)
			{
				var strContent = this.GetFileContent(strRepoUrl,strBranch,strPath);
				if (strContent == false)
				{
					return false;
				}
				
				var strXml = Base64Decode(strContent);
				var packageRecord = ParseXml(strXml);
				packageRecord = GetValue(packageRecord,'record_update','sys_app');
				if (IsObject(packageRecord))
				{
					return packageRecord;
				}
			}
			
		}
		return false;
	},

	GetDependencyRecordsFromRepo: function(strRepoUrl,strBranch)
	{
		var Base64Decode = x_snc_devtools.Base64Decode;
		var ParseXml = x_snc_devtools.ParseXml;
		var GetValue = x_snc_devtools.GetValue;
		var SetValue = x_snc_devtools.SetValue;
		var GetStringValue = x_snc_devtools.GetStringValue;	
		var IsValidSysId = x_snc_devtools.IsValidSysId;
		var Clone = x_snc_devtools.Clone;
		
		var aFiles = this.GetFilesFromRepo(strRepoUrl,strBranch);
		if (aFiles == false)
		{
			return false;
		}
		
		var aDependencies = [];
		
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var strPath = aFiles[nFile];
			
			if (   strPath.indexOf('x_snc_devtools_dependency_') != -1
				&& strPath.indexOf('author_elective_update/') == -1)
			{
				var strContent = this.GetFileContent(strRepoUrl,strBranch,strPath);
				if (strContent == false)
				{
					return false;
				}
				var strXml = Base64Decode(strContent);
				var dependencyRecord = ParseXml(strXml);
				dependencyRecord = GetValue(dependencyRecord,'record_update','x_snc_devtools_dependency');
				var strDependencySysId = GetStringValue(GetValue(dependencyRecord,'dependency','content'));
				if (IsValidSysId(strDependencySysId) == true)
				{
					dependencyRecord = SetValue(strDependencySysId,dependencyRecord,'dependency');
				}
				aDependencies.push(Clone(dependencyRecord));
			}
			
		}
		return aDependencies;
	},
	

    type: 'SourceControlAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-15 20:53:27</sys_created_on>
        <sys_id>eefacce2dba9ed106a03dad1f39619ac</sys_id>
        <sys_mod_count>55</sys_mod_count>
        <sys_name>SourceControlAPI</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_eefacce2dba9ed106a03dad1f39619ac</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-30 09:26:28</sys_updated_on>
    </sys_script_include>
</record_update>
