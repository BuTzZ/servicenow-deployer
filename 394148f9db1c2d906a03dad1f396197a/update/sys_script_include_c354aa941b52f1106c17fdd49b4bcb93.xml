<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_deployer.ExecuteDeploymentTask</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Executes the given task.&#13;
If the task is "automatic" the function will trigger the automatic execution.&#13;
If the task is manual, it does nothing.</description>
        <name>ExecuteDeploymentTask</name>
        <script><![CDATA[function ExecuteDeploymentTask(grTask)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	var Sleep = x_snc_devtools.Sleep;
	var GetValue = x_snc_devtools.GetValue;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;
	var IsArray = x_snc_devtools.IsArray;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var StringFormat = x_snc_devtools.StringFormat;

	if (IsValidRecord(grTask) == false)
	{
		return false;
	}
	
	if (grTask.state != GetDeploymentTaskState('inprogress'))
	{
		return false;
	}
	
	if (grTask.execution == 'manual')
	{
		DeploymentTaskUpdateStatus(grTask,'Waiting for user to perform manual task: '+grTask.short_description);
		return ValidateDeploymentTask(grTask);
	}
	else if (grTask.execution == 'automatic')
	{
		DeploymentTaskUpdateStatus(grTask,'Starting automatic execution of task: '+grTask.short_description);
		
		var bResult = false;
		if (grTask.action == 'run_install_scripts')
		{
			bResult = TargetInstanceRunInstallScripts(grTask.deployment.instance.getRefRecord(),grTask.id);
			if (bResult == true)
			{
				DeploymentTaskUpdateStatus(grTask,'Installation scripts have been executed successfully.');
			}
			else
			{
				DeploymentTaskUpdateStatus(grTask,'At least one AppInstall() function returned an error. Please check the logs on the target instance for details.');
			}
		}
		else if (grTask.action == 'run_atf_test_suite')
		{
			var strTestSuiteSysId = '';
			var aApps = TargetInstanceGetApplicationList(grTask.deployment.instance.getRefRecord());
			if (IsArray(aApps) == true)
			{
				for (var nApp = 0; nApp < aApps.length; nApp++)
				{
					var app = aApps[nApp];
					if (GetValue(app,'sys_id') == grTask.id)
					{
						if (IsValidSysId(GetValue(app,'atf_test_suite_default_sys_id')) == true)
						{
							strTestSuiteSysId = GetValue(app,'atf_test_suite_default_sys_id');
						}
					}
				}
			}
			
			if (IsValidSysId(strTestSuiteSysId))
			{
				//Debug('Executing test suite');
				var vResult = TargetInstanceATFTestSuiteRun(grTask.deployment.instance.getRefRecord(),strTestSuiteSysId);
				//Debug(vResult);
				if (IsValidSysId(vResult) == true)
				{
					var strProgressId = vResult;
					var bRunning = true;
					while (bRunning == true)
					{
						Sleep(10);
						var vProgress = TargetInstanceCICDCheckProgress(grTask.deployment.instance.getRefRecord(),strProgressId);
						//Debug('AFTER TargetInstanceATFTestSuiteCheckProgress');
						//Debug(vProgress);

						var nStatus = GetIntegerValue(GetValue(vProgress,'result','status'));
						//Debug(nStatus);
						if (nStatus > 1) // not pending, not running
						{
							bRunning = false;
						}
						
						var strText = GetStringValue(GetValue(vProgress,'result','status_message'));
						if (strText == '')
						{
							var nPercent = GetIntegerValue(GetValue(vProgress,'result','percent_complete'));
							strText = StringFormat(grTask.short_description+': {0}% complete',nPercent);
						}
						DeploymentTaskUpdateStatus(grTask,strText);
						
						if (nStatus == 2)
						{
							bResult = true;
						}
					}
				}
			}
			else
			{
				DeploymentTaskUpdateStatus(grTask,'No default ATF Suite found.');
				bResult = true;
			}
			
		}	
		else if (grTask.action == 'run_codesanity')
		{
			var status = TargetInstanceGetStatus(grTask.deployment.instance.getRefRecord());
			
			var strScanSuiteSysId = GetValue(status,'codesanity_scansuite');
			if (IsValidSysId(strScanSuiteSysId) == true)
			{
				var vResult = TargetInstanceInstanceScanRunSuiteOnApp(grTask.deployment.instance.getRefRecord(),strScanSuiteSysId,grTask.id);
				if (IsValidSysId(vResult) == true)
				{
					var strProgressId = vResult;
					var bRunning = true;
					while (bRunning == true)
					{
						Sleep(10);
						var vProgress = TargetInstanceCICDCheckProgress(grTask.deployment.instance.getRefRecord(),strProgressId);

						var nStatus = GetIntegerValue(GetValue(vProgress,'result','status'));
						if (nStatus > 1) // not pending, not running
						{
							bRunning = false;
						}
						
						DeploymentTaskUpdateStatus(grTask,GetValue(vProgress,'result','status_message'));
					
						
						if (nStatus == 2)
						{
							// Better receive the actual results via api and check it properly
							var strStatusMessage = GetValue(vProgress,'result','status_message');
							if (strStatusMessage.indexOf('0 finding(s)') != -1)
							{
								bResult = true;	
							}
						}
					}
				}
			}
			else
			{
				DeploymentTaskUpdateStatus(grTask,'Could not identify the CodeSanity scan suite.');
				bResult = true;
			}
		}	
		else if (grTask.action == 'install_switch_branch' || grTask.action == 'install_apply_remote_changes')
		{
			var status = TargetInstanceGetStatus(grTask.deployment.instance.getRefRecord());
						
			var vResult = TargetInstanceSourceControlApplyChanges(grTask.deployment.instance.getRefRecord(),grTask.id,grTask.branch);
			Debug(vResult);
			if (IsValidSysId(vResult) == true)
			{
				var strProgressId = vResult;
				var bRunning = true;
				while (bRunning == true)
				{
					Sleep(10);
					var vProgress = TargetInstanceCICDCheckProgress(grTask.deployment.instance.getRefRecord(),strProgressId);

					Debug(vProgress);
					
					var nStatus = GetIntegerValue(GetValue(vProgress,'result','status'));
					if (nStatus > 1) // not pending, not running
					{
						bRunning = false;
					}

					
					var strText = GetStringValue(GetValue(vProgress,'result','status_message'));
					if (strText == '')
					{
						var nPercent = GetIntegerValue(GetValue(vProgress,'result','percent_complete'));
						strText = StringFormat(grTask.short_description+': {0}% complete',nPercent);
					}
					DeploymentTaskUpdateStatus(grTask,strText);	
						
					if (nStatus == 2)
					{
						// Better receive the actual results via api and check it properly
						var strStatusMessage = GetValue(vProgress,'result','status_detail');
						DeploymentTaskUpdateStatus(grTask,strStatusMessage);
						
						var strStatusDetail = GetValue(vProgress,'result','status_label');
						if (strStatusDetail.indexOf('Successful') != -1)
						{
							bResult = true;	
						}
					}
				}
			}

		}			
		
		
		if (bResult == true)
		{
			bResult = ValidateDeploymentTask(grTask);
			//Debug('ValidateDeploymentTask returned: '+x_snc_devtools.RenderValue(bResult));
		}
		
		if (bResult == true)
		{
			grTask.state = GetDeploymentTaskState('complete');
		}
		else
		{
			grTask.state = GetDeploymentTaskState('failed');
		}
		if (bResult == false)
		{
			LogError('Failed to execute deployment task: '+x_snc_devtools.RenderValue(grTask));
		}
		
		grTask.update();
		
		return bResult;
	}
		
	return true;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-31 11:18:25</sys_created_on>
        <sys_id>c354aa941b52f1106c17fdd49b4bcb93</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_name>ExecuteDeploymentTask</sys_name>
        <sys_package display_value="Deployer WORK IN PROGRESS" source="x_snc_deployer">394148f9db1c2d906a03dad1f396197a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Deployer WORK IN PROGRESS">394148f9db1c2d906a03dad1f396197a</sys_scope>
        <sys_update_name>sys_script_include_c354aa941b52f1106c17fdd49b4bcb93</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-17 10:35:02</sys_updated_on>
    </sys_script_include>
</record_update>
